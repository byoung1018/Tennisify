Tennisify.Views.NewMeeting = Backbone.ErrorView.extend({
  createTemplate: JST['meetings/form'],
  inviteTemplate: JST['meetings/invite'],
  events: {
    "click .submit-meeting": "createMeeting",
    "click .invite": "renderInvite",
    "click .autofill": "autofill",
  },
  className: "meeting-form",
  tagName: "form",

  initialize: function () {
    this.users = new Tennisify.Collections.Users()
    this.listenTo(this.users, "sync", this.showUsers);
    this.$showList = $(".user-list");
    if (!this.collection) {this.collection = new Tennisify.Collections.Users()};

  },

  checkRandom: function (possibleValues) {
    var size = rand(possibleValues.length);
    for (var i = 0; i < size; i++) {
      $('[value="' + possibleValues[rand(possibleValues.length-1)] + '"]').prop("checked", true)
    }
  },

  autofill: function (event) {
    event.preventDefault();
    $("#meeting-title").attr("value", "Test Meeting #" + rand(100));
    $("#meeting-date").attr("value", "2015-" + toDoubleDigit(rand(12)) +
                            "-" + toDoubleDigit(rand(28)))
    $("#meeting-time").attr("value", toDoubleDigit(rand(23)) + ":" + toDoubleDigit(rand(59)))
    $("#meeting-location").attr("value", rand(9999) + " Sesame St." );
    this.checkRandom(["M", "F"]);
    $("#meeting-about").text("This is a test meeting generated by the autofill button")
    this.checkRandom(AGEGROUPS);
    this.checkRandom(LEVELS);
    $("#meeting-maximum-players").attr("value", rand(8))
  },

  createMeeting: function (event) {
    event.preventDefault();
    var attrs = $(event.delegateTarget).serializeJSON()["meeting"];
    var invitedIds = []
    this.collection.each(function (player) {
      invitedIds.push(player.id)
    })
    var meeting = new Tennisify.Models.Meeting(attrs);
    meeting.set("invited", invitedIds);
    meeting.save({}, {
      success: function (meeting) {
        Backbone.history.navigate(("meetings/" + meeting.id), {trigger: true})
        $('#modal').modal('toggle')
      },
      error: function (meeting, errors) {
        this.renderErrors(errors)
      }.bind(this)
    })
  },

  showUsers: function () {
    this.$userList.empty();
    this.addPlayerOptions(this.users, this.$userList)
  },

  renderInvite: function (event) {
    event.preventDefault();
    var attrs = $(event.delegateTarget).serializeJSON()["meeting"];
    this.model = new Tennisify.Models.Meeting(attrs);
    var content = new Tennisify.Views.MeetingInvitees({
      model: this.model,
      collection: this.collection})
    this.inviteTemplate({model: this.model});
    this.$el.html(content.render());
  },

  render: function () {
    if (!this.model) {this.model = new Tennisify.Models.Meeting();}
    var content = this.createTemplate({
      title: "Create Meeting",
      buttonText: "Create",
      meeting: this.model
    });
    this.$el.html(content);
    this.$invited = this.$(".display-invited");
    this.collection.each(function (user) {
      var li = $("<li>");
      li.text(user.get("fname") + " " + user.get("lname"))
      this.$invited.append(li)
    }.bind(this))

    return this;
  },

});
